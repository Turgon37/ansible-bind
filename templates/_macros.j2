{#
 # Produce a bind style list of items
 # Add a semi colon after each items
 #
 # @param list parameter : the list of string items
 # @return string
 #}
{%- macro listify(parameter) -%}
{{ parameter if parameter is string else parameter|join('; ') }};
{%- endmacro -%}


{#
 # Take an 'human readable' email address and convert it to Bind email syntax
 #
 # @param string email the email address
 # @return string the email address emailified
 #}
{%- macro emailify(email) -%}
{{ email|replace('@', '.') }}
{%- endmacro -%}


{#
 # Convert a domain name to its FQDN version
 #
 # @param string domain the domain name to convert
 # @return the fqdnified email
 #}
{%- macro fqdn(domain) -%}
{{ domain if domain[domain|length -1] == '.' else domain~'.' }}
{%- endmacro -%}


{#
 # Produce a Bind zone statement from the given configuration
 #
 # @param string name the name of the zone (it's domain name)
 # @param dict config some configuration values
 #     config.class : OPTIONAL the class of the zone
 #     config.file : 'auto' for auto generated zone file
 #     config.allow_update : list of address/host autorized to perform update on this zone
 #
 # @return the zone statement
 #}
{%- macro zone(name, config) -%}
zone "{{ name }}" {{ config.class|d('IN') }} {
  type {{ config.type }};
{% if config.file == 'auto' %}
{%   if config.type in ['master'] %}
  file "{{ bind__static_zones_directory }}/db.{{ name }}";
{%   else %}
  file "{{ bind__dynamic_zones_directory }}/db.{{ name }}";
{%   endif %}
{% else %}
{%   if config.file is match("^/") %}
  file "{{ config.file }}";
{%   else %}
  file "{{ bind__static_zones_directory}}/{{ config.file }}";
{%   endif %}
{% endif %}
{% if config.allow_update is defined %}
  allow-update { {{ listify(config.allow_update) }} };
{% endif %}
{% if config.masters is defined %}
  masters { {{ listify(config.masters) }} };
{% endif %}
};
{%- endmacro -%}


{#
 # Format a Bind Zone RR entry data field
 #
 # @param string/list
 #
 # @return the RR data field
 #}
{%- macro rrdata(data) -%}
{%- if data is string -%}
{{   data }}
{%- else -%}
{{   (['(']|union(data)|union([')']))|join('\n')|indent(92) }}
{%- endif -%}
{%- endmacro -%}

{#
 # Produce a Bind Zone RR statement from the given specifications
 #
 # @param dict spec the RR entry specifications
 #     spec.name : OPTIONAL the name of the entry
 #     spec.ttl : OPTIONAL the TTL of the entry
 #     spec.class : OPTIONAL the class of the entry
 #     spec.type : the type of the entry
 #     spec.data : depends on the value of type
 #           'SOA': data.ns        the name of the main name server
                    data.email     the administrator email
                    data.serial    the zone serial
                    data.refresh   refresh time for slave
                    data.retry     time between slave retry attempts
                    data.expiry    expiry time considered by slave for this zone
                    data.negative  minimum time/default ttl
             'TXT'/'SPF':
                    data           the content of the field, it will be automatically chunked
 #          -other-: OPTIONAL
 #
 # @return the RR entry
 #}
{%- macro rrentry(spec) -%}
{% set name  = spec.name|d('') %}
{% set ttl   = spec.ttl|d('') %}
{% set class = spec.class|d('IN') %}
{% set type  = spec.type %}
{# CONVERT SOME CUSTOM TYPES #}
{### SOA ###}
{% if type == 'SOA' %}
{%   set data = [
                  spec.data.ns,
                  fqdn( emailify(spec.data.email) ),
                  spec.data.serial~' ; Serial',
                  spec.data.refresh~' ; Refresh',
                  spec.data.retry~' ; Retry',
                  spec.data.expiry~' ; Expire',
                  spec.data.negative~' ; Negative Cache TTL'
                ] %}
{### TXT / SPF ###}
{% elif type in ['TXT', 'SPF'] %}
{%   set _chunks = [] %}
{#   split the full record data into 255 caracters chunks #}
{%   for i in range(0, spec.data|length, 255) %}
{%     set _ = _chunks.append('"'~(spec.data[i:i+255]|regex_replace('(["\\\])', '\\\\\\1'))~'"') %}
{%   endfor %}
{%   if _chunks|length == 0 %}
{%     set data = '"empty"' %}
{%   elif _chunks|length == 1 %}
{%     set data = _chunks[0] %}
{%   else %}
{%     set data = '('~_chunks|join(' ')~')' %}
{%   endif %}
{% elif type in ['SSHFP'] %}
{%   set data = [
                  spec.data.algorithm~' ; Algorithm',
                  spec.data.type~' ; Type',
                  spec.data.fingerprint,
                ] %}
{### OTHER ###}
{% else %}
{%   set data = spec.data|d('') %}
{% endif %}
{%- if spec.comment is defined -%}
{{   spec.comment|comment(decoration='; ') }}
{% endif -%}
{{ '%-70s %-10s %-2s %-10s %-100s'|format(name, ttl, class, type|upper, rrdata(data)) }}
{%- endmacro -%}
