---
# defaults file for bind

# Enable facts deploiement
bind__facts: true


### INSTALLATION CONFIGURATION
# ---------------------------------------
# List of packages to install
bind__packages_names: []

# List of distribution specific directories and files that will
# be removed to clean the working directory
bind__remove_distribution_directories: []
bind__remove_distribution_files: []


### SERVICE CONFIGURATION
# ---------------------------------------
# The user and group that bind will run as
bind__service_user: bind
bind__service_group: '{{ bind__service_user }}'

# The name of the system service
bind__service_name: bind9

# Determine if the service will be enabled
bind__service_enabled: true

# optionnal path to the environment file
# bind__service_environment:

# Path to optional old sysvinit script to remove
# bind__service_sysvinit_script:

# the path to the bind exectuable
bind__service_executable: /usr/sbin/named

# the path to the pidfile of bind
bind__pid_file: '{{ bind__service_run_directory}}/bind.pid'

# Main configuration directory
bind__config_directory: /etc/bind
# main configuration file
bind__config_file: '{{ bind__config_directory }}/named.conf'

# runtime directory for service configuration
bind__service_run_directory: /var/run/bind

# Working directory with run-time stuff
bind__var_directory: /var/bind

# directory where to put dump and bind generated files
bind__var_data_directory: '{{ bind__var_directory }}/data'

# When performing dynamic update of secure zones
# (Note that this option has no effect on the paths for files containing
# non-DNSSEC keys such as bind.keys, rndc.key or session.key.)
bind__keys_directory: '{{ bind__config_directory }}/keys'

# Specifies the directory in which to store the files
# that track managed DNSSEC keys
bind__managed_keys_directory: '{{ bind__var_directory }}/dnssec-keys'

# Program tool to use to check bind configuration syntax
bind__checkconf_program: /usr/bin/env named-checkconf

# Program tool to use to check zone configuration syntax
bind__checkzone_program: /usr/bin/env named-checkzone


### BIND CONFIGURATION
# ---------------------------------------
# The pathname of the file the server dumps the database
# to when instructed to do so with rndc dumpdb
bind__dump_file: '{{ bind__var_data_directory }}/cache_dump.db'

# The pathname of the file the server appends statistics to when
# instructed to do so using rndc stats.
bind__statistics_file: '{{ bind__var_data_directory }}/stats.txt'

# The pathname of the file the server writes memory usage statistics to on exit
bind__memstatistics_file: '{{ bind__var_data_directory }}/mem_stats.txt'

# The pathname of the file into which to write a TSIG session key
# generated by named for use by nsupdate -l
bind__session_keyfile: '{{ bind__service_run_directory }}/session.key'

# Configure ACLs
# each one must have {name: 'friendly name', 'match': ['any', '0.0.0.0/24']}
bind__config_acls: '{{ bind__config_directory }}/named.conf.acls'

# List of user defined acls
bind__acls: []

# Default location for rndc management key
bind__rndc_keyfile: '{{ bind__config_directory }}/rndc.key'

# Default network port to listen on
bind__default_port: 53

# Ipv4 settings
bind__listen_on: 127.0.0.1
bind__listen_on_port: '{{ bind__default_port }}'
# IPv6 settings
bind__listen_on_v6: '::1'
bind__listen_on_v6_port: '{{ bind__default_port }}'

# Query restrictions
bind__allow_query: localhost
bind__allow_query_on: 'any'
bind__blackhole: 'none'

# Recursions settings
bind__recursion: "{{ false if bind__allow_recursion == 'none' else true }}"
bind__allow_recursion: 'none'
bind__allow_recursion_on: 'any'

bind__empty_zones_enable: true
bind__empty_contact: 'local@localhost'
bind__empty_server: localhost
bind__disable_empty_zone: []

bind__forward: first
bind__forwarders: []

# Path to zones directory
bind__zones_directory: '{{ bind__config_directory }}/zones'
# Default location of static zones
bind__static_zones_directory: '{{ bind__zones_directory }}/static'
# Default location of dynamic zones
bind__dynamic_zones_directory: '{{ bind__zones_directory }}/dynamic'

# List of default zones
bind__zones_default:
  '.':
    type: hint
    file: db.root
    source_url: https://www.internic.net/domain/named.cache
    # the url from which to retrieve the root names servers list
    source_checksum:
      'sha256:cc56780553678b1b545b5722564e9c47063edab15b28a5033b36b0a36be64c05'
    # Don't produce fail state if the checksum mismatch
    source_ignore_errors: false
  localhost.localdomain:
    type: master
    file: auto
    allow_update: 'none'
    entries:
      - name: '@'
        type: NS
        data: 'localhost.'
      - name: '1.0.0'
        type: PTR
        data: 'localhost.'
  localhost:
    type: master
    file: auto
    entries:
      - name: '@'
        type: 'NS'
        data: 'localhost.'
      - name: '@'
        type: 'A'
        data: '127.0.0.1'
      - name: '@'
        type: 'AAAA'
        data: '::1'
  '127.in-addr.arpa':
    type: master
    file: auto
    entries:
      - name: '@'
        type: NS
        data: 'localhost.'
      - name: '1.0.0'
        type: PTR
        data: 'localhost.'
  '0.in-addr.arpa':
    type: master
    file: auto
    entries:
      - name: '@'
        type: NS
        data: 'localhost.'
  '255.in-addr.arpa':
    type: 'master'
    file: auto
    entries:
      - name: '@'
        type: NS
        data: 'localhost.'

# This variable is intended to be used in Ansibleâ€™s global inventory.
bind__zones_global: {}

# This variable is intended to be used in a host inventory group of Ansible
# (only one host group is supported).
bind__zones_group: {}

# This variable is intended to be used in the inventory of hosts.
bind__zones_host: {}

# Combine all zones settings
bind__zones: '{{
    bind__zones_default
    |combine(bind__zones_global)
    |combine(bind__zones_group)
    |combine(bind__zones_host)
  }}'

# Default TTL
bind__zones_default_ttl: 604800

# Defaults values for some DNS entries
bind__zones_entry_default:
  SOA:
    data:
      email: '{{ bind__empty_contact }}'
      serial: "{{
        ansible_date_time.year~
        ansible_date_time.month~
        ansible_date_time.day~'00' }}"
      refresh: 86400
      retry: 900
      expiry: 2419200
      negative: 3600

# List of allowed RR class
bind__allowed_rr_class:
  - IN

# List of allowed RR type
bind__allowed_rr_types:
  - A
  - AAAA
  - AFSDB
  - APL
  - CAA
  - CDNSKEY
  - CDS
  - CERT
  - CNAME
  - DHCID
  - DLV
  - DNAME
  - DNSKEY
  - DS
  - HIP
  - IPSECKEY
  - KEY
  - KX
  - LOC
  - MX
  - NAPTR
  - NS
  - NSEC
  - NSEC3
  - NSEC3PARAM
  - OPENPGPKEY
  - PTR
  - RP
  - RRSIG
  - SIG
  - SOA
  - SRV
  - SSHFP
  - TA
  - TKEY
  - TLSA
  - TSIG
  - TXT
  - URI

# Mapping of ansible_fact and SSHFP key types
bind__sshfp_facts_key_type_mapping:
  ansible_ssh_host_key_ecdsa_public: ecdsa-sha2-nistp256
  ansible_ssh_host_key_ed25519_public: ssh-ed25519
  ansible_ssh_host_key_rsa_public: ssh-rsa
  ansible_ssh_host_key_dsa_public: ssh-dss
